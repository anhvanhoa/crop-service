package plant_variety

import (
	"context"

	"farm-service/domain/entity"
	"farm-service/domain/repository"
)

// CreatePlantVarietyUsecase defines the interface for creating plant varieties
type CreatePlantVarietyUsecase interface {
	Execute(ctx context.Context, req *entity.CreatePlantVarietyRequest) (*entity.PlantVariety, error)
}

// createPlantVarietyUsecase implements CreatePlantVarietyUsecase
type createPlantVarietyUsecase struct {
	plantVarietyRepo repository.PlantVarietyRepository
}

// NewCreatePlantVarietyUsecase creates a new instance of CreatePlantVarietyUsecase
func NewCreatePlantVarietyUsecase(plantVarietyRepo repository.PlantVarietyRepository) CreatePlantVarietyUsecase {
	return &createPlantVarietyUsecase{
		plantVarietyRepo: plantVarietyRepo,
	}
}

// Execute creates a new plant variety
func (u *createPlantVarietyUsecase) Execute(ctx context.Context, req *entity.CreatePlantVarietyRequest) (*entity.PlantVariety, error) {
	// Create plant variety entity
	plantVariety := &entity.PlantVariety{
		ID:                 "", // Will be generated by database
		Name:               req.Name,
		ScientificName:     req.ScientificName,
		Category:           req.Category,
		GrowingSeason:      req.GrowingSeason,
		GrowthDurationDays: req.GrowthDurationDays,
		OptimalTempMin:     req.OptimalTempMin,
		OptimalTempMax:     req.OptimalTempMax,
		OptimalHumidityMin: req.OptimalHumidityMin,
		OptimalHumidityMax: req.OptimalHumidityMax,
		PHMin:              req.PHMin,
		PHMax:              req.PHMax,
		WaterRequirement:   req.WaterRequirement,
		LightRequirement:   req.LightRequirement,
		Description:        req.Description,
		MediaID:            req.MediaID,
		Status:             "active", // Default status
		CreatedBy:          req.CreatedBy,
	}

	// Save to repository
	err := u.plantVarietyRepo.Create(ctx, plantVariety)
	if err != nil {
		return nil, err
	}

	return plantVariety, nil
}
