package planting_cycle

import (
	"context"

	"farm-service/domain/entity"
	"farm-service/domain/repository"
)

// CreatePlantingCycleUsecase defines the interface for creating planting cycles
type CreatePlantingCycleUsecase interface {
	Execute(ctx context.Context, req *entity.CreatePlantingCycleRequest) (*entity.PlantingCycle, error)
}

// createPlantingCycleUsecase implements CreatePlantingCycleUsecase
type createPlantingCycleUsecase struct {
	plantingCycleRepo repository.PlantingCycleRepository
}

// NewCreatePlantingCycleUsecase creates a new instance of CreatePlantingCycleUsecase
func NewCreatePlantingCycleUsecase(plantingCycleRepo repository.PlantingCycleRepository) CreatePlantingCycleUsecase {
	return &createPlantingCycleUsecase{
		plantingCycleRepo: plantingCycleRepo,
	}
}

// Execute creates a new planting cycle
func (u *createPlantingCycleUsecase) Execute(ctx context.Context, req *entity.CreatePlantingCycleRequest) (*entity.PlantingCycle, error) {
	// Create planting cycle entity
	plantingCycle := &entity.PlantingCycle{
		ID:                  "", // Will be generated by database
		CycleName:           req.CycleName,
		GrowingZoneID:       req.GrowingZoneID,
		PlantVarietyID:      req.PlantVarietyID,
		SeedDate:            req.SeedDate,
		TransplantDate:      req.TransplantDate,
		ExpectedHarvestDate: req.ExpectedHarvestDate,
		ActualHarvestDate:   req.ActualHarvestDate,
		PlantQuantity:       req.PlantQuantity,
		SeedBatch:           req.SeedBatch,
		Status:              req.Status,
		Notes:               req.Notes,
		CreatedBy:           req.CreatedBy,
	}

	// Set default status if not provided
	if plantingCycle.Status == "" {
		plantingCycle.Status = "planning"
	}

	// Save to repository
	err := u.plantingCycleRepo.Create(ctx, plantingCycle)
	if err != nil {
		return nil, err
	}

	return plantingCycle, nil
}
